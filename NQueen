public class d_NQueens {
    public static int count = 0;
    public static boolean nQueens(char board [][],int row ){
        //base case
        if(row==board.length){
            //printBoard(board);
            count++;
            return true;
        }
        //column loop
        for(int j=0;j<board.length;j++){
            if(isSafe(board,row,j)){
            board[row][j] = 'Q';
            if(nQueens(board, row+1)){
                return true;
            }
            board[row][j] = 'x'; 
            }
           
        }
        return false;
    }
    public static boolean isSafe(char board[][],int row,int col){
        //top
        for(int i= row-1;i>=0;i--){
            if(board[i][col]=='Q'){
                return false;
            }
        }
        //diag left
        for(int i=row-1,j=col-1;i>=0&&j>=0;i--,j--){
            if(board[i][j]=='Q'){
                return false;
            }

        }
        //diag right
        for(int i=row-1,j=col+1;i>=0&&j<board.length;i--,j++){
            if(board[i][j]=='Q'){
                return false;
            }

        }
        return true;
    }
   private static void printBoard(char[][] board) {
    for(int i=0;i<board.length;i++){
        for(int j=0;j<board.length;j++){
            System.out.print(board[i][j]+" ");
        }
        System.out.println();
    }
    System.out.println("----------");
    }
public static void main(String[] args) {
    int n = 8;
    char board [][] = new char [n][n];
    //initialization
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            board[i][j] = 'x';
        }
    }
    if(nQueens(board, 0)){
        System.out.println("solution is possible");
        printBoard(board);
    }else{
        System.out.println("solution is not possible");
    }
    System.out.println(count);
   }
}
